# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, VoVcHiC
# This file is distributed under the same license as the aiosend package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiosend \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 02:42+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ru\n"
"Language-Team: ru <LL@li.org>\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../events/routers.rst:2
msgid "Routers"
msgstr ""

#: ../../events/routers.rst:4
msgid ""
"Router is an object for routing updates. There are two types of routers: "
":class:`PollingRouter <aiosend.polling.PollingRouter>` and "
":class:`WebhookRouter <aiosend.webhook.WebhookRouter>`. :class:`CryptoPay"
" <aiosend.CryptoPay>` is the root router for both of them. One router can"
" include another router, but in the end, the parent router must be "
"included in the root router via :meth:`include_router "
"<aiosend._events.BaseRouter.include_router>` or :meth:`include_routers "
"<aiosend._events.BaseRouter.include_routers>` methods."
msgstr ""

#: ../../events/routers.rst:13
msgid "Usage example"
msgstr ""

#: aiosend._events.router.BaseRouter:1 of
msgid "Base router for handling and propogate events."
msgstr ""

#: aiosend._events.router.BaseRouter.include_router:1 of
msgid "Include another router to this one."
msgstr ""

#: ../../events/routers.rst
msgid "Return type"
msgstr ""

#: aiosend._events.observer.EventObserver.register:4
#: aiosend._events.router.BaseRouter.include_router:4
#: aiosend._events.router.BaseRouter.include_routers:4 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:obj\\:\\`None\\``"
msgstr ""

#: aiosend._events.router.BaseRouter.include_routers:1 of
msgid "Include multiple routers to this one."
msgstr ""

#: aiosend.polling.router.PollingRouter:1
#: aiosend.webhook.router.WebhookRouter:1 of
msgid "Bases: :py:class:`~aiosend._events.router.BaseRouter`"
msgstr ""

#: aiosend.polling.router.PollingRouter:1 of
msgid "Router for polling events."
msgstr ""

#: aiosend.webhook.router.WebhookRouter:1 of
msgid "Router for webhook updates."
msgstr ""

#: ../../events/routers.rst:27
msgid "Event observers"
msgstr ""

#: ../../events/routers.rst:28
msgid ""
"Event observer is an object that stores event handlers. You can attach a "
"new event handler to event observer using a :code:`@router.<event "
"type>(...)` decorator or a :code:`router.<event type>.register(...)` "
"method."
msgstr ""

#: aiosend._events.observer.EventObserver:1 of
msgid "Event observer for storing handlers and propagating events."
msgstr ""

#: aiosend._events.observer.EventObserver.register:1 of
msgid "Register event handler."
msgstr ""

#: aiosend._events.observer.EventObserver.trigger:1 of
msgid "Trigger event observer."
msgstr ""

#: aiosend._events.observer.EventObserver.trigger:4 of
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr ""

#: ../../events/routers.rst:36
msgid "Polling Router"
msgstr ""

#: ../../events/routers.rst:38
msgid ""
"Avaliable observers for :class:`PollingRouter "
"<aiosend.polling.PollingRouter>` are listed here."
msgstr ""

#: ../../events/routers.rst:41 ../../events/routers.rst:78
msgid "Paid invoice"
msgstr ""

#: ../../events/routers.rst:49
msgid "Expired invoice"
msgstr ""

#: ../../events/routers.rst:57
msgid "Activated check"
msgstr ""

#: ../../events/routers.rst:65
msgid "Expired check"
msgstr ""

#: ../../events/routers.rst:73
msgid "Webhook Router"
msgstr ""

#: ../../events/routers.rst:75
msgid ""
"Avaliable observers for :class:`WebhookRouter "
"<aiosend.webhook.WebhookRouter>` are listed here."
msgstr ""

