# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, VoVcHiC
# This file is distributed under the same license as the aiosend package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: aiosend \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-09-01 02:42+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ru\n"
"Language-Team: ru <LL@li.org>\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../events/check_polling.rst:3
msgid "Check polling"
msgstr "Поллинг чеков"

#: ../../events/check_polling.rst:5
msgid ""
"Polling is a method of receiving updates by periodically sending "
"requests. Once :attr:`check status <aiosend.types.Check.status>` is "
"changed to :attr:`ACTIVATED <aiosend.enums.CheckStatus.ACTIVATED>`, "
":class:`polling manager <aiosend.polling.PollingManager>` will call the "
":meth:`check_activated <aiosend.CryptoPay.check_activated>` handler. "
"Check polling uses the :meth:`/getChecks <aiosend.CryptoPay.get_checks>` "
"method."
msgstr ""
"Поллинг - это метод получения обновлений путём периодической отправки "
"запросов. После того, как :attr:`статус чека "
"<aiosend.types.Check.status>` будет изменён на :attr:`ACTIVATED "
"<aiosend.enums.CheckStatus.ACTIVATED>`, :class:`поллинг менеджер "
"<aiosend.polling.PollingManager>` вызовет обработчик :meth:`check_activated"
" <aiosend.CryptoPay.check_activated>`. Поллинг чеков использует метод "
":meth:`/getChecks <aiosend.CryptoPay.get_checks>`."

#: ../../events/check_polling.rst:13
msgid ""
":class:`Polling manager <aiosend.polling.PollingManager>` has "
":class:`configuration <aiosend.polling.PollingConfig>` that defines the "
":attr:`delay <aiosend.polling.PollingConfig.delay>` (between requests) "
"and :attr:`timeout <aiosend.polling.PollingConfig.timeout>` for each "
"check in the awaiting queue. After the timeout polling manager will stop "
"polling that check and call the :meth:`check_expired "
"<aiosend.CryptoPay.check_expired>` handler if it is declared."
msgstr ""
":class:`Поллинг менеджер <aiosend.polling.PollingManager>` имеет "
":class:`конфигурацию <aiosend.polling.PollingConfig>`, в которой в "
"которой задаются :attr:`задержка <aiosend.polling.PollingConfig.delay>` "
"между запросами и :attr:`таймаут <aiosend.polling.PollingConfig.timeout>`"
" для каждого чека в очереди. После истечения таймаута менеджер прекратит "
"поллинг этого чека и вызовет обработчик :meth:`check_expired "
"<aiosend.CryptoPay.check_expired>`, если тот указан."

#: ../../events/check_polling.rst:22
msgid "**Default is 2 seconds delay and 300 seconds (5 min) timeout**."
msgstr ""
"**По умолчанию задержка между запросами - 2 секунды, а таймаут - 300 "
"секунд (5 минут)**."

#: ../../events/check_polling.rst:24
msgid ":doc:`You can change the polling configuration. <polling_config>`"
msgstr ":doc:`Вы можете изменять конфигурацию поллинга <polling_config>`"

#: ../../events/check_polling.rst:27
msgid "Usage example"
msgstr "Пример использования"